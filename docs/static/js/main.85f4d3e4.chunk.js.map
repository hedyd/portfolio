{"version":3,"sources":["Project/Project.js","App.js","serviceWorker.js","index.js"],"names":["Project","responsibilities","this","props","map","item","index","react_default","a","createElement","key","className","title","job","year","skills","join","src","concat","image","alt","summary","Component","App","projects","projectData","project","src_Project_Project","Object","assign","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAsCeA,0LAjCX,IAAMC,EAAmBC,KAAKC,MAAMF,iBAAiBG,IAAI,SAACC,EAAMC,GAAP,OAAiBC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAOK,UAAU,aAAaN,KACjH,OACEE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2BACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,SAAST,KAAKC,MAAMS,OAClCL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAAOT,KAAKC,MAAMU,IAAjC,IAAuCX,KAAKC,MAAMW,MAClDP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YAAd,UACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAeT,KAAKC,MAAMY,OAAOC,KAAK,SAGzDT,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2BACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACbJ,EAAAC,EAAAC,cAAA,OAAKQ,IAAG,UAAAC,OAAYhB,KAAKC,MAAMgB,OAASC,IAAI,MAE9Cb,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YAAd,WACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAgBT,KAAKC,MAAMkB,UAE5Cd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YAAd,oBACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QACXV,cAzBKqB,qBCePC,mLAZX,IAAMC,EAAWC,EAAYrB,IAAI,SAACsB,EAASpB,GACzC,OAAOC,EAAAC,EAAAC,cAACkB,EAADC,OAAAC,OAAA,CAASnB,IAAKJ,EAAOA,MAAOA,GAAWoB,MAGhD,OACEnB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACZa,UARSF,aCQEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.85f4d3e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Project.css';\n\nclass Project extends Component {\n  render() {\n    const responsibilities = this.props.responsibilities.map((item, index) => <li key={index} className=\"list-item\">{item}</li>);\n    return (\n      <div className=\"project\">\n        <div className=\"container container-one\">\n          <h2 className=\"title\">{this.props.title}</h2>\n          <div className=\"job\">{this.props.job} {this.props.year}</div>\n          <div className=\"skills\">\n            <h3 className=\"subtitle\">Skills</h3>\n            <div className=\"skills-text\">{this.props.skills.join(', ')}</div>\n          </div>\n        </div>\n        <div className=\"container container-two\">\n          <div className=\"image\">\n            <img src={`images/${this.props.image}`} alt=\"\" />\n          </div>\n          <div className=\"text\">\n            <div className=\"summary\">\n              <h3 className=\"subtitle\">Summary</h3>\n              <div className=\"summary-text\">{this.props.summary}</div>\n            </div>\n            <div className=\"res\">\n              <h3 className=\"subtitle\">Responsibilities</h3>\n              <ul className=\"list\">\n                {responsibilities}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Project;\n","import React, { Component } from 'react';\nimport Project from './Project/Project';\nimport projectData from './Project/data.json';\n\nclass App extends Component {\n  render() {\n    const projects = projectData.map((project, index) => {\n      return <Project key={index} index={index} {...project} />\n    });\n\n    return (\n      <div className=\"App\">\n        {projects}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}